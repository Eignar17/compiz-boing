/*
 * This file is autogenerated with bcop:
 * The Compiz option code generator
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 */

#ifndef _BOING_OPTIONS_H
#define _BOING_OPTIONS_H

#include <compiz-common.h>

COMPIZ_BEGIN_DECLS

CompPluginVTable * getCompPluginInfo (void);

typedef enum
{
    BoingDisplayOptionNumLeaves,
    BoingDisplayOptionLeafSize,
    BoingDisplayOptionWindSpeed,
    BoingDisplayOptionAutumnUpdateDelay,
    BoingDisplayOptionScreenBoxing,
    BoingDisplayOptionScreenDepth,
    BoingDisplayOptionLeavesOverWindows,
    BoingDisplayOptionLeafRotation,
    BoingDisplayOptionWindDirection,
    BoingDisplayOptionLeafTextures,
    BoingDisplayOptionUseBlending,
    BoingDisplayOptionUseTextures,
    BoingDisplayOptionToggleKey,
    BoingDisplayOptionNum
} BoingDisplayOptions;

typedef void (*boingDisplayOptionChangeNotifyProc) (CompDisplay *display, CompOption *opt, BoingDisplayOptions num);

CompOption *boingGetDisplayOption (CompDisplay *d, BoingDisplayOptions num);

typedef enum
{
    BoingScreenOptionNum
} BoingScreenOptions;

typedef void (*boingScreenOptionChangeNotifyProc) (CompScreen *screen, CompOption *opt, BoingScreenOptions num);

CompOption *boingGetScreenOption (CompScreen *s, BoingScreenOptions num);

typedef enum
{
    WindDirectionNoWind = 0,
    WindDirectionUp = 1,
    WindDirectionLeft = 2,
    WindDirectionRight = 3,
} BoingWindDirectionEnum;

int              boingGetNumLeaves (CompDisplay *d);
CompOption *     boingGetNumLeavesOption (CompDisplay *d);
void             boingSetNumLeavesNotify (CompDisplay *d, boingDisplayOptionChangeNotifyProc notify);

float            boingGetLeafSize (CompDisplay *d);
CompOption *     boingGetLeafSizeOption (CompDisplay *d);
void             boingSetLeafSizeNotify (CompDisplay *d, boingDisplayOptionChangeNotifyProc notify);

int              boingGetWindSpeed (CompDisplay *d);
CompOption *     boingGetWindSpeedOption (CompDisplay *d);
void             boingSetWindSpeedNotify (CompDisplay *d, boingDisplayOptionChangeNotifyProc notify);

int              boingGetAutumnUpdateDelay (CompDisplay *d);
CompOption *     boingGetAutumnUpdateDelayOption (CompDisplay *d);
void             boingSetAutumnUpdateDelayNotify (CompDisplay *d, boingDisplayOptionChangeNotifyProc notify);

int              boingGetScreenBoxing (CompDisplay *d);
CompOption *     boingGetScreenBoxingOption (CompDisplay *d);
void             boingSetScreenBoxingNotify (CompDisplay *d, boingDisplayOptionChangeNotifyProc notify);

int              boingGetScreenDepth (CompDisplay *d);
CompOption *     boingGetScreenDepthOption (CompDisplay *d);
void             boingSetScreenDepthNotify (CompDisplay *d, boingDisplayOptionChangeNotifyProc notify);

Bool             boingGetLeavesOverWindows (CompDisplay *d);
CompOption *     boingGetLeavesOverWindowsOption (CompDisplay *d);
void             boingSetLeavesOverWindowsNotify (CompDisplay *d, boingDisplayOptionChangeNotifyProc notify);

Bool             boingGetLeafRotation (CompDisplay *d);
CompOption *     boingGetLeafRotationOption (CompDisplay *d);
void             boingSetLeafRotationNotify (CompDisplay *d, boingDisplayOptionChangeNotifyProc notify);

int              boingGetWindDirection (CompDisplay *d);
CompOption *     boingGetWindDirectionOption (CompDisplay *d);
void             boingSetWindDirectionNotify (CompDisplay *d, boingDisplayOptionChangeNotifyProc notify);

CompListValue *  boingGetLeafTextures (CompDisplay *d);
CompOption *     boingGetLeafTexturesOption (CompDisplay *d);
void             boingSetLeafTexturesNotify (CompDisplay *d, boingDisplayOptionChangeNotifyProc notify);

Bool             boingGetUseBlending (CompDisplay *d);
CompOption *     boingGetUseBlendingOption (CompDisplay *d);
void             boingSetUseBlendingNotify (CompDisplay *d, boingDisplayOptionChangeNotifyProc notify);

Bool             boingGetUseTextures (CompDisplay *d);
CompOption *     boingGetUseTexturesOption (CompDisplay *d);
void             boingSetUseTexturesNotify (CompDisplay *d, boingDisplayOptionChangeNotifyProc notify);

CompAction *     boingGetToggleKey (CompDisplay *d);
void             boingSetToggleKeyInitiate (CompDisplay *d, CompActionCallBackProc init);
void             boingSetToggleKeyTerminate (CompDisplay *d, CompActionCallBackProc term);
CompOption *     boingGetToggleKeyOption (CompDisplay *d);
void             boingSetToggleKeyNotify (CompDisplay *d, boingDisplayOptionChangeNotifyProc notify);

#ifndef GENERIC_PRIVATE_DEFINES
#define GENERIC_PRIVATE_DEFINES

#define GET_PLUGIN_CORE(object, plugin) \
    ((plugin##Core *) (object)->base.privates[plugin##CorePrivateIndex].ptr)
#define PLUGIN_CORE(object, plugin, prefix) \
    plugin##Core * prefix##c = GET_PLUGIN_CORE (object, plugin)

#define GET_PLUGIN_DISPLAY(object, plugin) \
    ((plugin##Display *) \
	(object)->base.privates[plugin##DisplayPrivateIndex].ptr)
#define PLUGIN_DISPLAY(object, plugin, prefix) \
    plugin##Display * prefix##d = GET_PLUGIN_DISPLAY (object, plugin)

#define GET_PLUGIN_SCREEN(object, parent, plugin) \
    ((plugin##Screen *) \
	(object)->base.privates[(parent)->screenPrivateIndex].ptr)
#define PLUGIN_SCREEN(object, plugin, prefix) \
    plugin##Screen * prefix##s = \
	GET_PLUGIN_SCREEN (object, \
	GET_PLUGIN_DISPLAY ((object)->display, plugin), plugin)

#define GET_PLUGIN_WINDOW(object, parent, plugin) \
    ((plugin##Window *) \
	(object)->base.privates[(parent)->windowPrivateIndex].ptr)
#define PLUGIN_WINDOW(object, plugin, prefix) \
    plugin##Window * prefix##w = \
	GET_PLUGIN_WINDOW  (object, \
	GET_PLUGIN_SCREEN  ((object)->screen, \
	GET_PLUGIN_DISPLAY ((object)->screen->display, plugin), plugin), plugin)

#endif

COMPIZ_END_DECLS

#endif
